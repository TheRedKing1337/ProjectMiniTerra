#pragma kernel CSMain

struct MeshProperties {
	float4x4 mat;
	float4 color;
};

RWStructuredBuffer<MeshProperties> _Properties;
float3 _CenterPosition;
float _PlanetScale;
uint _FaceWidth;
float4 _DebugQuaternion;

float4 lookRotation(float3 position, float3 lookPosition, float3 up)
{
	float3 F = normalize(lookPosition - position);   // lookAt
	float3 R = normalize(cross(up, F)); // sideaxis
	float3 U = cross(F, R);                  // rotatedup

	// note that R needed to be re-normalized
	// since F and worldUp are not necessary perpendicular
	// so must remove the sin(angle) factor of the cross-product
	// same not true for U because dot(R, F) = 0

	// adapted source
	float4 r;
	float trace = R.x + U.y + F.z;
	if (trace > 0.0f)
	{
		float s = 0.5f / sqrt(trace + 1.0f);
		r.w = 0.25f / s;
		r.x = (U.z - F.y) * s;
		r.y = (F.x - R.z) * s;
		r.z = (R.y - U.x) * s;
	}
	else
	{
		if (R.x > U.y && R.x > F.z)
		{
			float s = 2.0f * sqrt(1.0f + R.x - U.y - F.z);
			r.w = (U.z - F.y) / s;
			r.x = 0.25f * s;
			r.y = (U.x + R.y) / s;
			r.z = (F.x + R.z) / s;
		}
		else if (U.y > F.z)
		{
			float s = 2.0f * sqrt(1.0f + U.y - R.x - F.z);
			r.w = (F.x - R.z) / s;
			r.x = (U.x + R.y) / s;
			r.y = 0.25f * s;
			r.z = (F.y + U.z) / s;
		}
		else
		{
			float s = 2.0f * sqrt(1.0f + F.z - R.x - U.y);
			r.w = (R.y - U.x) / s;
			r.x = (F.x + R.z) / s;
			r.y = (F.y + U.z) / s;
			r.z = 0.25f * s;
		}
	}
	return r;
}

// We used to just be able to use (1, 1, 1) threads for whatever population (not sure the old limit), but a Unity update
// imposed a thread limit of 65535.  Now, to populations above that, we need to be more granular with our threads.
[numthreads(64, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
	float3 localUp = float3(0, 0, 0);
	uint faceIndex = floor(id.x / (_FaceWidth * _FaceWidth));
	switch (faceIndex)
	{
	case 0:localUp = float3(0, 1, 0);
		break;
	case 1:localUp = float3(0, 0, -1);
		break;
	case 2:localUp = float3(1, 0, 0);
		break;
	case 3:localUp = float3(-1, 0, 0);
		break;
	case 4:localUp = float3(0, 0, 1);
		break;
	case 5:localUp = float3(0, -1, 0);
		break;
	default:
		break;
	}

	float3 axisA = { localUp.y, localUp.z, localUp.x };
	float3 axisB = cross(localUp, axisA);

	//LocalIndex is the position on this face
	uint localIndex = id.x % (_FaceWidth * _FaceWidth);
	uint x = localIndex % _FaceWidth;
	uint y = floor(localIndex / _FaceWidth);

	float2 percent = float2(x, y) / (_FaceWidth - (float)1);
	float3 pointOnUnitCube = localUp + (percent.x - 0.5f) * 2 * axisA + (percent.y - 0.5f) * 2 * axisB;

	//Get squared cube positions
	float3 cubeSqrd = pointOnUnitCube * pointOnUnitCube;

	//Get the position in sphere space
	float3 position;
	position.x = pointOnUnitCube.x * sqrt(1 - cubeSqrd.y / 2 - cubeSqrd.z / 2 + cubeSqrd.y * cubeSqrd.z / 3);
	position.y = pointOnUnitCube.y * sqrt(1 - cubeSqrd.x / 2 - cubeSqrd.z / 2 + cubeSqrd.x * cubeSqrd.z / 3);
	position.z = pointOnUnitCube.z * sqrt(1 - cubeSqrd.x / 2 - cubeSqrd.y / 2 + cubeSqrd.x * cubeSqrd.y / 3);

	//Calc rotation
	float4 r = lookRotation(position, _CenterPosition, float3(0, 1, 0));

	//DEBUG
	//r = _DebugQuaternion;

	//Normalize rotation
	const float n = 1.0f / sqrt(r.x * r.x + r.y * r.y + r.z * r.z + r.w * r.w);
	r.x *= n;
	r.y *= n;
	r.z *= n;
	r.w *= n;

	//Build matrix out of rotation
	float4x4 mat_rot =
	{
		1.0f - 2.0f * r.y * r.y - 2.0f * r.z * r.z, 2.0f * r.x * r.y - 2.0f * r.z * r.w, 2.0f * r.x * r.z + 2.0f * r.y * r.w, 0.0f,
			2.0f * r.x * r.y + 2.0f * r.z * r.w, 1.0f - 2.0f * r.x * r.x - 2.0f * r.z * r.z, 2.0f * r.y * r.z - 2.0f * r.x * r.w, 0.0f,
			2.0f * r.x * r.z - 2.0f * r.y * r.w, 2.0f * r.y * r.z + 2.0f * r.x * r.w, 1.0f - 2.0f * r.x * r.x - 2.0f * r.y * r.y, 0.0f,
			0.0f, 0.0f, 0.0f, 1.0f
	};

	//Scale position, can only be done because center is at 0,0,0
	position = position * _PlanetScale;

	//Calc size of cubes needed to fill surface
	float cubeSize = _PlanetScale / _FaceWidth;

	// Create a new translation matrix which represents a move in a direction.
	float4x4 translation = float4x4(
		cubeSize, 0, 0, position.x,
		0, cubeSize, 0, position.y,
		0, 0, cubeSize, position.z,
		0, 0, 0, 1
		);

	// Apply translation and rotation to existing matrix, which will be read in the shader.
	_Properties[id.x].mat = mul(translation, mat_rot);;
}